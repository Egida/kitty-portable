// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/kitty.ini (990B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resKittyIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x53\x41\x6f\xf3\x36\x0c\xbd\xeb\x57\x04\xf0\x65\x0b\xd0\xc0\x2d\x96\xae\x17\x1d\xba\x0c\x45\x86\x0e\x6d\x30\x67\x18\x8a\x34\x18\x14\x99\xb1\x89\xc8\x94\x21\xd2\x4d\xd2\x7e\xfd\xef\x1f\x24\xb9\x2d\x7a\xe3\xa3\xa5\xc7\xf7\xc4\xe7\xcd\x6d\x03\x24\x5b\x55\x74\xc0\x6c\x1a\xf0\x74\x80\xf3\x10\x2b\x4d\x5e\x15\x86\x0f\xd6\xd3\x1e\x43\x67\x04\x3d\x69\x33\x88\x57\x9b\x45\x6c\x35\x7f\xf8\xd3\x56\xb5\x80\x4d\x2b\xfa\xea\x52\xed\xd1\x09\x04\x7d\x06\x56\x45\x0d\x7b\x33\x38\xf9\x06\x18\x44\x90\x1a\xce\x4d\xf2\x70\x42\x49\x33\x8e\x48\xb5\x3f\x8e\x44\xd7\x65\xa9\x36\xf7\xb8\x5e\x3f\x6d\xd5\xce\xd8\x43\x13\xfc\x40\x35\x76\xa3\x20\x6b\x7a\x76\xde\x1e\x52\xed\x69\x9f\xc8\xec\xb9\x11\x08\x5d\xaa\xd1\x7a\x4a\xac\x98\x74\x3b\xd0\x07\x14\x39\xcf\xe0\x04\xaa\xa0\xa1\xdb\x41\xf0\xfb\xf8\x8d\xf5\x6f\x73\xd5\x1b\x96\xc4\xdb\x07\xa4\x2c\x97\x6d\xc0\x5e\xe2\xcd\xd1\xd0\xad\x73\x93\x08\x79\xf2\xcb\x74\x36\xfd\xf5\xc7\x74\x36\x55\x8c\xaf\xe9\x1a\xb7\x3e\x88\x1d\x24\x9b\xea\xfc\xc0\xf0\xbd\xd5\x9e\x7b\x08\x0e\x29\x09\x96\x60\x88\x7b\x13\x80\xec\x39\x69\x4c\x12\x9b\x1a\x83\x56\x45\xed\x8f\xe4\xbc\xa9\x33\x1a\xfa\xaf\x3a\x40\xe7\x05\x72\xbd\xaa\x16\xab\x95\x91\x76\x2c\x1f\xfb\xb8\x15\xd6\x17\x6c\xfb\xc9\x45\x50\xc5\x2a\xce\x1a\x0f\xfc\x87\xf4\x75\x7a\x21\x4b\x70\x3d\x84\x11\x1a\x12\xc4\xda\x81\xd6\x93\xe7\x43\x79\xf3\xfc\xd5\xa9\xc1\x99\xb3\xbe\x2e\x55\xc1\xdc\xbe\x40\xe0\xb8\xf6\xc7\x1e\xa8\xaa\x96\xff\xcf\x67\xf3\x4f\xde\xe0\xc5\x5b\xef\x34\xef\xa5\x57\x45\x0c\x06\x8b\x0f\xc0\xdc\x1e\x20\xdb\xfb\x97\xe3\x3c\xe6\xaa\x5a\x3e\xf8\xca\xbc\xe4\x48\x59\x09\x4e\xcc\x2e\xc7\xe0\x1e\x17\xce\x30\x3f\x98\x0e\xf4\x6a\x58\xaf\x9f\x54\x67\x4e\xbb\x68\x02\xa9\x11\xec\x40\xcf\x33\x77\x00\xeb\x89\xc0\x8e\x99\xfa\xe7\x03\xfe\x99\xe4\xce\x55\x91\xf7\xd6\xf9\x1a\xf2\x09\x53\xe7\x11\x6c\x5e\x20\x75\x6b\x0c\xaa\xd8\xd9\xec\xaf\x8c\x8f\xdf\x75\x86\xea\x11\xcf\xca\xb9\x2a\x90\x50\x32\xbe\x9a\x95\x11\x0a\x04\x32\x2e\xb7\x2e\xcb\xb8\x0a\x53\x7b\x72\xc9\x1e\x3b\xac\xe1\x83\xed\x88\x14\xbc\x4b\x03\x8f\x48\x82\xe2\xb2\x8c\xd7\x38\x3a\x27\x73\xb3\x8a\x19\xfb\xfc\x63\x2e\xcb\x32\x7a\x75\x48\x10\x5f\xbb\x33\x27\xdb\x9a\xa0\x6f\xe6\x6a\x73\xe7\x5d\x0d\x61\xab\x36\x7f\x9b\x81\x6c\x1b\xcb\x00\x31\x0f\x99\xa7\xfa\x48\xd8\x76\x8c\xed\x5b\xb5\xfc\xeb\x6e\xfd\xfe\x76\xf7\xfb\x7b\xee\x18\xe7\x74\x42\x3f\x03\x00\x00\xff\xff\xa1\x5b\xa6\x3c\xde\x03\x00\x00")

func resKittyIniBytes() ([]byte, error) {
	return bindataRead(
		_resKittyIni,
		"res/kitty.ini",
	)
}

func resKittyIni() (*asset, error) {
	bytes, err := resKittyIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/kitty.ini", size: 990, mode: os.FileMode(438), modTime: time.Unix(1539732256, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf5, 0x48, 0xda, 0xe5, 0xde, 0xab, 0xd6, 0x9c, 0xc0, 0x72, 0x21, 0x47, 0xf3, 0x14, 0x89, 0x31, 0xd5, 0x5, 0xe6, 0x57, 0x54, 0x83, 0x37, 0x34, 0x8c, 0xc0, 0x19, 0x98, 0x25, 0xe1, 0xd1, 0x5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/kitty.ini": resKittyIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"kitty.ini": &bintree{resKittyIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
