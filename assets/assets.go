// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/kitty.ini (960B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resKittyIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x53\x41\x6b\xdb\x4c\x10\xbd\xef\xaf\x30\xe8\xf2\x7d\x86\x18\x25\xd4\x69\x2e\x7b\x48\x5d\x82\x4b\x4a\x62\x2a\x97\x12\x1c\x53\xd6\xab\xb1\x34\x78\x35\x2b\x76\x46\xb1\xd5\x34\xff\xbd\xac\x56\x49\xc8\x6d\xde\xf3\xec\xcc\x7b\x9a\xe7\xcd\x75\x05\x24\x5b\x95\x35\xc0\x6c\x2a\xf0\x74\x80\xbe\x8b\x95\x26\xaf\x32\xc3\x07\xeb\x69\x8f\xa1\x31\x82\x9e\xb4\xe9\xc4\xab\xcd\x22\x52\xd5\x17\x7f\xda\xaa\x1a\xb0\xaa\x45\x5f\x9c\xab\x3d\x3a\x81\xa0\x7b\x60\x95\x95\xb0\x37\x9d\x93\x0f\x80\x41\x04\xa9\xe2\x44\x92\x87\x13\xca\xb0\xe3\x88\x54\xfa\xe3\x38\xe8\x32\xcf\xd5\xe6\x16\xd7\xeb\x87\xad\xb2\xa6\x65\xe7\xed\x21\x76\x45\x15\xc3\x4b\xdb\x57\x02\xa1\x89\x1c\x5a\x4f\xc3\x04\x1c\x34\x3a\xd0\x07\x14\xe9\x67\x70\x02\x95\x51\xd7\xec\x20\xf8\x7d\xfc\x8d\xf5\xa7\xb9\x6a\x0d\xcb\x60\xaa\x0d\x48\x49\x1a\xdb\x80\xad\xc4\x97\xa3\xf8\x6b\xe7\x26\x11\xf2\xe4\xbf\xe9\x6c\xfa\xff\xdf\xe9\x6c\xaa\x18\xff\x0c\xcf\xb8\xf6\x41\x6c\x27\xc9\x40\xe3\x3b\x86\x8f\x54\xdd\xb7\x10\x1c\xd2\xa0\x57\x82\x21\x6e\x4d\x00\xb2\xfd\xa0\x71\x90\x58\x95\x18\xb4\xca\x4a\x7f\x24\xe7\x4d\x99\x50\xd7\xbe\xd7\x01\x1a\x2f\x90\xea\x55\xb1\x58\xad\x8c\xd4\x63\x79\xdf\xc6\x0b\xb0\x3e\x63\xdb\x4e\xce\x82\xca\x56\x71\xd7\xd8\xf0\x0b\xe9\xbd\x7b\x21\x4b\x70\x2d\x84\x11\x1a\x12\xc4\xd2\x81\xd6\x93\xc7\x43\x7e\xf5\xf8\xce\x94\xe0\x4c\xaf\x2f\x73\x95\x31\xd7\x4f\x10\x38\x9e\xf8\xbe\x05\x2a\x8a\xe5\xef\xf9\x6c\xfe\x36\x37\x78\xf1\xd6\x3b\xcd\x7b\x69\x55\x16\x43\xc0\xe2\x03\x30\xd7\x07\x48\xf6\x7e\x72\xdc\xc7\x5c\x14\xcb\x3b\x5f\x98\xa7\x14\x1f\x2b\xc1\x89\xd9\xa5\x93\xdf\xe2\xc2\x19\xe6\x3b\xd3\x80\x5e\x75\xeb\xf5\x83\x6a\xcc\x69\x17\x4d\x20\x55\x82\x0d\xe8\x79\x9a\x1d\xc0\x7a\x22\xb0\x63\x7e\x7e\xbc\xc2\xaf\x83\xdc\xb9\xca\xd2\xdd\x1a\x5f\x42\xea\x30\x65\x5a\xc1\xe6\x09\x06\xb6\xc4\xa0\xb2\x9d\x4d\xfe\xf2\xf8\xf1\x9b\xc6\x50\x39\xe2\x59\x3e\x57\x19\x12\x4a\xc2\x17\xb3\x3c\x42\x81\x40\xc6\x25\xea\x3c\x8f\xa7\x30\xa5\x27\x37\xd8\x63\x87\x25\xbc\x4e\x3b\x22\x05\xef\xdc\xb0\xf1\x88\x24\x28\x2e\xe9\xd8\xac\x62\xb2\xde\xfe\x13\xe7\x79\x1e\x1d\x3a\x24\x88\xdf\xb8\x31\x27\x5b\x9b\xa0\xaf\xe6\x6a\x73\xe3\x5d\x09\x61\xab\x36\xdf\x4d\x47\xb6\x8e\x65\x80\x98\x82\x34\xa7\x78\xcd\xd5\x76\x0c\xeb\x73\xb1\xfc\x76\xb3\x7e\x79\xbe\xf9\xfc\x92\x18\xe3\x9c\x1e\xd0\xbf\x00\x00\x00\xff\xff\x47\xf5\x0d\x9a\xc0\x03\x00\x00")

func resKittyIniBytes() ([]byte, error) {
	return bindataRead(
		_resKittyIni,
		"res/kitty.ini",
	)
}

func resKittyIni() (*asset, error) {
	bytes, err := resKittyIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "res/kitty.ini", size: 960, mode: os.FileMode(0666), modTime: time.Unix(1558517986, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x80, 0x5d, 0xa9, 0xab, 0x9e, 0x8c, 0xa8, 0x86, 0x95, 0xcd, 0xb8, 0x3f, 0x94, 0x38, 0xf3, 0x8f, 0xc3, 0xce, 0x18, 0x45, 0x34, 0x15, 0x8d, 0x98, 0x46, 0x40, 0x35, 0x5, 0x73, 0xea, 0xf1, 0x4e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"res/kitty.ini": resKittyIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"res": &bintree{nil, map[string]*bintree{
		"kitty.ini": &bintree{resKittyIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
